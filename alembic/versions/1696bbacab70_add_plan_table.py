"""Add plan table

Revision ID: 1696bbacab70
Revises: 403b9ff039b1
Create Date: 2023-12-09 18:08:41.668082

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel # added
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1696bbacab70'
down_revision: Union[str, None] = '403b9ff039b1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_payment_subscription_subscription_id', table_name='subscriptions_payments')
    op.drop_table('subscriptions_payments')
    op.alter_column('plans', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('plans', 'planType',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               nullable=False)
    op.alter_column('plans', 'maxMessages',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('plans', 'product_id',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               nullable=False)
    op.drop_index('idx_plan_price_id', table_name='plans')
    op.drop_index('idx_plan_product_id', table_name='plans')
    op.drop_constraint('plans_price_id_key', 'plans', type_='unique')
    op.drop_constraint('plans_product_id_key', 'plans', type_='unique')
    op.drop_column('plans', 'price_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('plans', sa.Column('price_id', sa.TEXT(), autoincrement=False, nullable=True))
    op.create_unique_constraint('plans_product_id_key', 'plans', ['product_id'])
    op.create_unique_constraint('plans_price_id_key', 'plans', ['price_id'])
    op.create_index('idx_plan_product_id', 'plans', ['product_id'], unique=False)
    op.create_index('idx_plan_price_id', 'plans', ['price_id'], unique=False)
    op.alter_column('plans', 'product_id',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('plans', 'maxMessages',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('plans', 'planType',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('plans', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)
    op.create_table('subscriptions_payments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('subscription_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('start_datetime', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_datetime', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('subscription_status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('datetime', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('plan_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('payment_method_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('payment_intent_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['payment_method_id'], ['payment_methods.id'], name='fk_payment_methods_payment_subscriptions'),
    sa.ForeignKeyConstraint(['payment_method_id'], ['payment_methods.id'], name='fk_subscriptions_payments_payment_method'),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], name='fk_plans_payment_subscriptions'),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], name='subscriptions_payments_plan_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_users_payment_subscriptions'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='subscriptions_payments_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='subscriptions_payments_pkey'),
    sa.UniqueConstraint('subscription_id', name='idx_subscriptions_payments_subscription_id')
    )
    op.create_index('idx_payment_subscription_subscription_id', 'subscriptions_payments', ['subscription_id'], unique=False)
    op.create_table('payment_methods',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='payment_methods_pkey')
    )
    # ### end Alembic commands ###
