"""Add prompt colume tone

Revision ID: 8a78623205f8
Revises: 0f2f5729e6d4
Create Date: 2023-12-20 21:19:21.965884

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel # added
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8a78623205f8'
down_revision: Union[str, None] = '0f2f5729e6d4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_payment_subscription_subscription_id', table_name='subscriptions_payments')
    op.drop_table('subscriptions_payments')
    op.drop_table('payments')
    op.alter_column('coins', 'user_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.alter_column('features', 'name',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               nullable=False)
    op.alter_column('features', 'date_of_create',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.Date(),
               nullable=False)
    op.alter_column('features', 'url',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               nullable=False)
    op.alter_column('plans', 'planType',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               nullable=False)
    op.alter_column('plans', 'maxMessages',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('plans', 'product_id',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               nullable=False)
    op.drop_index('idx_plan_price_id', table_name='plans')
    op.drop_index('idx_plan_product_id', table_name='plans')
    op.drop_constraint('idx_plans_product_id', 'plans', type_='unique')
    op.drop_constraint('plans_price_id_key', 'plans', type_='unique')
    op.drop_column('plans', 'price_id')
    op.add_column('tones', sa.Column('prompt', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.alter_column('users', 'firebase_id',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('users', 'name',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('users', 'profilepic',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('users', 'stripe_id',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('users', 'plan_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.drop_index('idx_user_firebase_id', table_name='users')
    op.drop_index('idx_user_stripe_id', table_name='users')
    op.drop_constraint('idx_users_stripe_id', 'users', type_='unique')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint('idx_users_stripe_id', 'users', ['stripe_id'])
    op.create_index('idx_user_stripe_id', 'users', ['stripe_id'], unique=False)
    op.create_index('idx_user_firebase_id', 'users', ['firebase_id'], unique=False)
    op.alter_column('users', 'plan_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=True)
    op.alter_column('users', 'stripe_id',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'profilepic',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'email',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'name',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'firebase_id',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('tones', 'prompt')
    op.add_column('plans', sa.Column('price_id', sa.TEXT(), autoincrement=False, nullable=True))
    op.create_unique_constraint('plans_price_id_key', 'plans', ['price_id'])
    op.create_unique_constraint('idx_plans_product_id', 'plans', ['product_id'])
    op.create_index('idx_plan_product_id', 'plans', ['product_id'], unique=False)
    op.create_index('idx_plan_price_id', 'plans', ['price_id'], unique=False)
    op.alter_column('plans', 'product_id',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('plans', 'maxMessages',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('plans', 'planType',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('features', 'url',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('features', 'date_of_create',
               existing_type=sa.Date(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('features', 'name',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('coins', 'user_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=True)
    op.create_table('payments',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('coin', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('transaction_stripe_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('datetime', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('payment_method_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('feature_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['feature_id'], ['features.id'], name='fk_features_payment'),
    sa.ForeignKeyConstraint(['payment_method_id'], ['payment_methods.id'], name='fk_payment_methods_payments'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_users_payment'),
    sa.PrimaryKeyConstraint('id', name='payments_pkey')
    )
    op.create_table('payment_methods',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('payment_methods_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='payment_methods_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('subscriptions_payments',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('subscription_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('datetime', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('start_datetime', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('end_datetime', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('subscription_status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('payment_method_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('plan_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['payment_method_id'], ['payment_methods.id'], name='fk_payment_methods_payment_subscriptions'),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], name='fk_plans_payment_subscriptions'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_users_payment_subscriptions'),
    sa.PrimaryKeyConstraint('id', name='subscriptions_payments_pkey'),
    sa.UniqueConstraint('subscription_id', name='idx_subscriptions_payments_subscription_id')
    )
    op.create_index('idx_payment_subscription_subscription_id', 'subscriptions_payments', ['subscription_id'], unique=False)
    # ### end Alembic commands ###
